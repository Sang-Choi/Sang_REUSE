//
// 17-651: FSP model of a simple infusion pump
//
// ASSUMPTIONS
// - The user can choose, in the setup phase, which item of info to enter next.
// - The simple enter_value action is a simple number pad where the user enters
//   numeric values.
// - There exist 'set' and 'cancel' buttons, which are the targets of press_set
//   and press_cancel.
// - When the user turns the unit off, the unit will be in a state as if it was
//   just plugged in.
//

//
// Set of actions that the user of the LTSA tool can control in an
// animation of this model.
//

//----------------------------------------------------------------------------------------------------------------------- LINE DETECTOR --------------------------------------------------------------------------------------------------------------------------------------

menu UserControlMenu = {
    change_settings, clear_rate, confirm_settings, connect_set,
    dispense_main_med_flow, enter_value, erase_and_unlock_line,
    flow_unblocked, sound_alarm, lock_unit, plug_in, press_cancel, 
    press_set, set_rate, silence_alarm, turn_off, unlock_unit, unplug,
    flow_blocked
}

//======================
// Constants and Ranges
//======================

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set

range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel

range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked

const Plugged   = 8
const Unplugged = 9

range PlugStateT = Plugged..Unplugged

const BatteryPrimary = 10
const BatterySecondary = 11

range BatteryStateT = BatteryPrimary..BatterySecondary

//===================
// SAFETY PROPERTIES
//===================

//THE PUMP CANNOT START PUMPIING WITHOUT THE OPERATOR FIRST CONFIRMING THE SETTINGS ON THE PUMP
property CONFIRM_SETTINGS = 
(
	connect_set->purge_air->lock_line->CONFIRM_SETTINGS
).

//ELECTRICAL POWER CAN FAIL AT ANY TIME
property ELECTRICAL = 
(
	unplug->sound_unplugged_alarm->ELECTRICAL
).

//IF THE BACKUP POWER FAILS, PUMPING WILL NOT OCCUR IN ANY LINE
property BACKUP_FAILURE = 
(
	secondary_battery_failure_infusion->battery_restored->BACKUP_FAILURE
).

//AN ALARM WILL SOUND ON ANY LINE FAILURE
property INFUSION_ERROR_ALARM = 
(
	flow_blocked -> INFUSION_ERROR_ALARM
).

//DURING INFUSIONS, IF CHANGES TO THE SETTNGS NEED TO BE MADE, THE INFUSION STOPS
property CHANGE_SETTINGS = 
(
	change_settings -> CHANGE_SETTINGS
).

//IF ALARM RINGS MORE THAN THREE TIMES AND IS NOT ADDRESS, PATIENT RECEIVES CRITICAL OVERDOSE

//property THREE_RINGS = 
//(
//	sound_alarm -> sound_alarm -> sound_alarm -> STOP
//).

//=====================
// LIVENESS PROPERTIES
//=====================

//IT IS ALWAYS POSSIBLE TO RESUME PUMPING AFTER A FAILURE
progress RESUME = 
{
	dispense_main_med_flow
}

//PLUGGING AND UNPLUGGING WILL CAUSE AN ALARM TO SOUND THAT THE USER MUST AND CAN ACKNOWLEDGE
progress SILENCE_ALARM = 
{
	silence_alarm
}


//=====================
// Process Definitions
//=====================

PUMP = POWER_OFF,

POWER_OFF = 
(
    turn_on -> SETUP[ParamsNotSet][LineUnlocked][Unplugged]
),

//
// Pump in setup mode:
// - Once required pump parameters (just rate in this case) are set,
//   physical connections can be made and line can be locked
//

SETUP[params:ParamsStateT][lineLock:LineLockStateT][plug:PlugStateT] = 
(
    turn_off -> POWER_OFF
    |
	when(plug == Unplugged)
   		plug -> sound_plugged -> SETUP[params][lineLock][Plugged]
    |
	when(plug == Plugged)
		unplug -> sound_unplugged_alarm -> BATTERY_SETUP[BatteryPrimary][params][lineLock]
	|
    when (params == ParamsNotSet && lineLock == LineUnlocked)
        set_rate -> enter_value ->
            (press_set -> SETUP[ParamsSet][lineLock][plug]
             |
             press_cancel -> SETUP[ParamsNotSet][lineLock][plug])
    |
    when (params == ParamsSet && lineLock == LineUnlocked)
        clear_rate -> SETUP[ParamsNotSet][LineUnlocked][plug]
    |
    when (params == ParamsSet && lineLock == LineUnlocked)
        connect_set -> purge_air -> lock_line -> SETUP[params][LineLocked][plug]
    |
    when (lineLock == LineLocked)
        confirm_settings -> INFUSION[UnitUnlocked][plug]
    |
    when (lineLock == LineLocked)
        erase_and_unlock_line -> SETUP[params][LineUnlocked][plug]
),

//
// Pump in infusion mode:
// - Always be able to turn the unit off, even if locked
// - Allow the user to lock/unlock the unit
// - Errors could occur with the pump (e.g., line became pinched or plugged)
//
INFUSION[unitLock:UnitLockStateT][plug:PlugStateT] =
(
    turn_off -> POWER_OFF
    |
	when(plug == Unplugged)
		plug->sound_plugged_alarm->INFUSION[unitLock][Plugged]
	|		
	when(plug == Plugged)
		unplug->sound_unplugged_alarm->BATTERY_INFUSION[BatteryPrimary][unitLock]
	|
    when (unitLock == UnitUnlocked)
        change_settings -> SETUP[ParamsSet][LineLocked][Unplugged]
    |
    when (unitLock == UnitUnlocked)
        lock_unit -> INFUSION[UnitLocked][plug]
    |
    when (unitLock == UnitLocked)
        unlock_unit -> INFUSION[UnitUnlocked][plug]
    |
    dispense_main_med_flow -> INFUSION[unitLock][plug]
    |
    flow_blocked -> INFUSION_BLOCKED[unitLock][AlarmActivated][plug]
),

//
// Pump stuck (medication flow suspended) (With ideal operator)
//

INFUSION_BLOCKED[unitLock:UnitLockStateT][alarm:AlarmStateT][plug:PlugStateT] =
(
    turn_off -> POWER_OFF
    |
    when (alarm == AlarmActivated)
        sound_alarm -> IDEAL_OPERATOR_ALARM_PLUGGED[unitLock][plug]
    |
    when (alarm == AlarmActivated)
        silence_alarm -> INFUSION_BLOCKED[unitLock][AlarmSilenced][plug]
  |
	when (alarm == AlarmSilenced)
    	flow_unblocked -> INFUSION[unitLock][plug]
),


//
//Pump stuck (medication flow suspended) (With erroneous operator)
//

//INFUSION_BLOCKED[unitLock:UnitLockStateT][alarm:AlarmStateT][plug:PlugStateT] =
//(
//   turn_off -> POWER_OFF
//    |
//    when (alarm == AlarmActivated)
//        sound_alarm -> ERRONEOUS_OPERATOR_ALARM_PLUGGED[unitLock][plug]
//   |
//    when (alarm == AlarmActivated)
//       silence_alarm -> INFUSION_BLOCKED[unitLock][AlarmSilenced][plug]
//    |
//	when (alarm == AlarmSilenced)
//    	flow_unblocked -> INFUSION[unitLock][plug]
//),

//
//Battery failure during INFUSION
//

INFUSION_BLOCKED_BATTERY[unitLock:UnitLockStateT][alarm:AlarmStateT][plug:PlugStateT] =
(
    when (alarm == AlarmActivated)
        sound_alarm -> INFUSION_BLOCKED_BATTERY[unitLock][alarm][plug]
    |
    when (alarm == AlarmActivated)
        silence_alarm -> INFUSION_BLOCKED_BATTERY[unitLock][AlarmSilenced][plug]
    |
	battery_restored-> INFUSION[unitLock][plug]
),

//
//Battery failure for SETUP
//

BATTERY_SETUP[batteryState:BatteryStateT][params:ParamsStateT][lineLock:LineLockStateT] = 
(
	when (batteryState == BatteryPrimary)
		primary_battery_failure_setup -> BATTERY_SETUP[BatterySecondary][params][lineLock]
	|
	when(batteryState == BatterySecondary)
		secondary_battery_failure_setup -> POWER_OFF
	|
	when (batteryState == BatteryPrimary)
		sound_primary_alarm->SETUP[params][lineLock][Unplugged]
	|
	when(batteryState == BatterySecondary)
		sound_secondary_alarm->SETUP[params][lineLock][Unplugged]
),

//
//Battery failure for INFUSION
//
BATTERY_INFUSION[batteryState:BatteryStateT][unitLock:UnitLockStateT] = 
(
	when(batteryState == BatteryPrimary)
		primary_battery_failure_infusion -> BATTERY_INFUSION[BatterySecondary][unitLock]
	|
	when(batteryState == BatterySecondary)
		secondary_battery_failure_infusion -> INFUSION_BLOCKED_BATTERY[unitLock][AlarmActivated][Unplugged]
	|
	when (batteryState == BatteryPrimary)
		sound_primary_alarm -> INFUSION[unitLock][Unplugged]
	|
	when(batteryState == BatterySecondary)
		sound_secondary_alarm -> INFUSION[unitLock][Unplugged]
),

//
//IDEAL HUMAN OPERATOR MODEL
//

IDEAL_OPERATOR_ALARM_PLUGGED[unitLock:UnitLockStateT][plug:PlugStateT] = 
(
	silence_alarm -> INFUSION_BLOCKED[unitLock][AlarmSilenced][plug]
).

//
//ERRONEOUS HUMAN OPERATOR MODEL
//

//ERRONEOUS_OPERATOR_ALARM_PLUGGED[unitLock:UnitLockStateT][plug:PlugStateT] = 
//(
//	sound_alarm -> INFUSION_BLOCKED[unitLock][AlarmActivated][plug]
//).




||SYS = (PUMP).

















