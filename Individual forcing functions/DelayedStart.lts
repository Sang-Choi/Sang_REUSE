//
// 17-651: FSP model of a simple infusion pump
//
// ASSUMPTIONS
// - The user can choose, in the setup phase, which item of info to enter next.
// - The simple enter_value action is a simple number pad where the user enters
//   numeric values.
// - There exist 'set' and 'cancel' buttons, which are the targets of press_set
//   and press_cancel.
// - When the user turns the unit off, the unit will be in a state as if it was
//   just plugged in.
//

//
// Set of actions that the user of the LTSA tool can control in an
// animation of this model.
//

//----------------------------------------------------------------------------------------------------------------------- LINE DETECTOR --------------------------------------------------------------------------------------------------------------------------------------

menu UserControlMenu = {
    change_settings, clear_rate, confirm_settings, connect_set,
    dispense_main_med_flow, enter_value, erase_and_unlock_line,
    flow_unblocked, sound_alarm, lock_unit, plug_in, press_cancel, 
    press_set, set_rate, silence_alarm, turn_off, unlock_unit, unplug,
    flow_blocked
}

//======================
// Constants and Ranges
//======================

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set

range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel

range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked

const Plugged   = 8
const Unplugged = 9

range PlugStateT = Plugged..Unplugged

const BatteryPrimary = 10
const BatterySecondary = 11

range BatteryStateT = BatteryPrimary..BatterySecondary

const ChargeFull = 2
const ChargeLow = 1
const Empty = 0

range C = Empty..ChargeFull


//=====================
// Process Definitions
//=====================

PUMP = POWER_OFF,

POWER_OFF = 
(
    turn_on -> SETUP[ParamsNotSet][Plugged][ChargeFull]
),

SETUP[params:ParamsStateT][plug:PlugStateT][charge:C] = 
(
    turn_off -> POWER_OFF
    |
    when (params == ParamsNotSet)
		set_params-> infuse -> INFUSION[plug][charge]
),

INFUSION[plug:PlugStateT][charge:C] =
(
    turn_off -> POWER_OFF
    |
	when(plug == Unplugged)
		plug->sound_plugged_alarm->INFUSION[unitLock][Plugged]
	|		
	when(plug == Plugged)
		unplug->sound_unplugged_alarm->BATTERY_INFUSION[BatteryPrimary][unitLock]
	|
	when(charge == ChargeFull || charge == ChargeLow)
		lose_charge-> BATTERY_CHARGE_SETUP[params][battery][charge]
	|
    dispense_main_med_flow -> INFUSION[plug][charge]
),


BATTERY_SETUP[batteryState:BatteryStateT][params:ParamsStateT][charge:C] = 
(
	when (batteryState == BatteryPrimary)
		primary_battery_failure_setup -> BATTERY_SETUP[BatterySecondary][params][charge]
	|
	when(batteryState == BatterySecondary)
		secondary_battery_failure_setup -> power_off_alarm -> POWER_OFF
	|
	when (batteryState == BatteryPrimary)
		sound_primary_alarm->SETUP[params][Unplugged][charge]
	|
	when(batteryState == BatterySecondary)
		sound_secondary_alarm->SETUP[params][Unplugged][charge]
),

BATTERY_INFUSION[batteryState:BatteryStateT][charge:C] = 
(
	when(batteryState == BatteryPrimary)
		primary_battery_failure_infusion -> BATTERY_INFUSION[BatterySecondary][unitLock]
	|
	when(batteryState == BatterySecondary)
		secondary_battery_failure_infusion -> power_off_alarm -> POWER_OFF
	|
	when (batteryState == BatteryPrimary)
		sound_primary_alarm -> INFUSION[Unplugged][charge]
	|
	when(batteryState == BatterySecondary)
		sound_secondary_alarm -> INFUSION[Unplugged][charge]
),

BATTERY_CHARGE_SETUP[params:ParamsStateT][battery:BatteryStateT][charge:C]
(
	when(charge == ChargeFull)
		low_battery_alarm->operator_acknowledge->BATTERY_CHARGE_SETUP[params][battery][ChargeLow]
	|
	when(charge == ChargeLow && battery == BatteryPrimary)
		primary_to_secondary_alarm->operator_acknowledge->BATTERY_CHARGE_SETUP[params][BatterySecondary][ChargeFull]
	|
	when(charge == ChargeLow && battery == BatterySecondary)
		critical_battery_alarm->operator_acknowledge->BATTERY_CHARGE_SETUP[params][battery][charge]
	|
	when(charge == ChargeLow && battery == BatterySecondary)
		power_off_alarm -> POWER_OFF
	|
	when (batteryState == BatteryPrimary)
		sound_primary_alarm -> INFUSION[Unplugged][charge]
	|
	when(batteryState == BatterySecondary)
		sound_secondary_alarm -> INFUSION[Unplugged][charge]
),

BATTERY_CHARGE_INFUSION[plug:PlugStateT][charge:C]
(

)
.















